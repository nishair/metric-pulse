name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18.x'

jobs:
  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npm run lint

    - name: Check Prettier formatting
      run: npm run format:check

  test:
    name: Test Suite
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_ecommerce_analytics
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Set up test environment
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: test_ecommerce_analytics
        DB_USER: test_user
        DB_PASSWORD: test_password
        NODE_ENV: test
      run: |
        echo "Test environment configured"

    - name: Run unit tests
      env:
        NODE_ENV: test
      run: npm run test:unit

    - name: Run integration tests
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: test_ecommerce_analytics
        DB_USER: test_user
        DB_PASSWORD: test_password
        NODE_ENV: test
      run: npm run test:integration

    - name: Run tests with coverage
      env:
        NODE_ENV: test
      run: npm run test:coverage

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run npm audit
      run: npm audit --audit-level high

    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  build-and-validate:
    name: Build and Validate
    runs-on: ubuntu-latest
    needs: [lint-and-format, test, security-scan]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Validate package
      run: npm run validate

    - name: Test database migration
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: test_migration
        DB_USER: postgres
        DB_PASSWORD: postgres
        NODE_ENV: test
      run: |
        # Start PostgreSQL for migration test
        sudo systemctl start postgresql
        sudo -u postgres createdb test_migration
        npm run migrate

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: ecommerce-analytics:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        docker run --rm ecommerce-analytics:test npm run test:unit

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-validate, docker-build]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ secrets.CONTAINER_REGISTRY }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.CONTAINER_REGISTRY }}/ecommerce-analytics:staging
          ${{ secrets.CONTAINER_REGISTRY }}/ecommerce-analytics:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Deploy to staging environment
      run: |
        echo "Deploying to staging environment"
        # Add your deployment commands here
        # This could be kubectl, docker-compose, or cloud provider CLI commands

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-validate, docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ secrets.CONTAINER_REGISTRY }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.CONTAINER_REGISTRY }}/ecommerce-analytics:latest
          ${{ secrets.CONTAINER_REGISTRY }}/ecommerce-analytics:v${{ github.run_number }}
          ${{ secrets.CONTAINER_REGISTRY }}/ecommerce-analytics:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          Automated release from CI/CD pipeline

          Commit: ${{ github.sha }}
          Workflow: ${{ github.workflow }}
        draft: false
        prerelease: false

    - name: Deploy to production environment
      run: |
        echo "Deploying to production environment"
        # Add your production deployment commands here
        # This should include proper rollout strategies, health checks, etc.

  notify:
    name: Notify Teams
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
    - name: Notify on success
      if: success()
      run: |
        echo "Pipeline completed successfully"
        # Add notification logic (Slack, Teams, email, etc.)

    - name: Notify on failure
      if: failure()
      run: |
        echo "Pipeline failed"
        # Add failure notification logic